@mixin breakpoint($point) {
	// max width 767px
	@if $point == Smartphonemini {
		@media only screen and (max-width: 375px) {
			@content;
		}
	}

	// max width 767px
	@if $point == Smartphone {
		@media only screen and (max-width: 767px) {
			@content;
		}
	}

	// iPads (portrait and landscape)-
	@if $point == Tablet {
		@media only screen and (max-width: 991px) {
			@content;
		}
	}
}

//Mixis-Extend
@mixin gradient($from, $to) {
	background: $from;
	background: -moz-linear-gradient(top, $from 0%, $to 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $from), color-stop(100%, $to));
	background: -webkit-linear-gradient(top, $from 0%, $to 100%);
	background: -o-linear-gradient(top, $from 0%, $to 100%);
	background: -ms-linear-gradient(top, $from 0%, $to 100%);
	background: linear-gradient(to bottom, $from 0%, $to 100%);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#{$from}', endColorstr='#{$to}'); /*For IE7-8-9*/
}
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}
@mixin box-shadow($value) {
	-moz-box-shadow: $value;
	-webkit-box-shadow: $value;
	box-shadow: $value;
}
@mixin text-shadow($value) {
	-moz-text-shadow: $value;
	-webkit-text-shadow: $value;
	text-shadow: $value;
}
@mixin transition($prop, $values...) {
	-moz-#{$prop}: $values;
	-ms-#{$prop}: $values;
	-o-#{$prop}: $values;
	-webkit-#{$prop}: $values;
	$prop: $values;
}
@mixin background-opacity($color, $opacity: 0.3) {
	background: $color; /* The Fallback */
	background: rgba($color, $opacity);
}
@mixin transform($string) {
	-webkit-transform: $string;
	-moz-transform: $string;
	-ms-transform: $string;
	-o-transform: $string;
	transform: $string;
}
@mixin transform-origin($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}
@mixin opacity($value) {
	$IEValue: $value * 100;
	opacity: $value;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $IEValue + ")";
	filter: alpha(opacity=$IEValue);
}
@mixin animation-name($name...) {
	-o-animation-name: $name;
	-moz-animation-name: $name;
	-webkit-animation-name: $name;
	animation-name: $name;
}
@mixin animation-duration($duration...) {
	-o-animation-duration: $duration;
	-moz-animation-duration: $duration;
	-webkit-animation-duration: $duration;
	animation-duration: $duration;
}
@mixin animation-timing-function($timing...) {
	-o-animation-timing-function: $timing;
	-moz-animation-timing-function: $timing;
	-webkit-animation-timing-function: $timing;
	animation-timing-function: $timing;
}
@mixin animation-iteration-count($count...) {
	-o-animation-iteration-count: $count;
	-moz-animation-iteration-count: $count;
	-webkit-animation-iteration-count: $count;
	animation-iteration-count: $count;
}
@mixin animation-delay($delay...) {
	-webkit-animation-delay: $delay;
	-o-animation-delay: $delay;
	-moz-animation-delay: $delay;
	animation-delay: $delay;
}

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}
@mixin flex-direction($value) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}
@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}
@mixin flex-flow(
	$values: (
		row nowrap,
	)
) {
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}
@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-webkit-flex: $values;
	-ms-flex: $values;
	flex: $values;
}
@mixin order($val) {
	-webkit-box-ordinal-group: $val;
	-moz-box-ordinal-group: $val;
	-ms-flex-order: $val;
	-webkit-order: $val;
	order: $val;
}
@mixin backface-visibility($values) {
	backface-visibility: $values;
	-webkit-backface-visibility: $values;
	-moz-backface-visibility: $values;
	-ms-backface-visibility: $values;
	-o-backface-visibility: $values;
}
@mixin font-smoothing($value: antialiased) {
	@if $value == antialiased {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	} @else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}
